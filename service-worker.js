!function(){"use strict";const e=1643223766365,s=`cache${e}`,a=["/client/client.59e9171e.js","/client/inject_styles.803b7e80.js","/client/index.f117ad95.js","/client/address.96073c54.js","/client/roadmap.7234aa13.js","/client/about.e476f1e8.js"].concat(["/service-worker-index.html","/CNAME","/browserconfig.xml","/favicon.ico","/icons/android-chrome-192x192.png","/icons/android-chrome-512x512.png","/icons/apple-touch-icon.png","/icons/favicon-16x16.png","/icons/favicon-32x32.png","/icons/mstile-150x150.png","/images/algo-logo.svg","/images/apps-logo.png","/images/bg-noise.jpg","/images/frame-bottom.png","/images/frame-sides.png","/images/frame-top.png","/images/hand-left.png","/images/hand-right.png","/images/myalgo-logo.png","/images/noise.png","/images/walletconnect-logo.svg","/ipfs/bafybeiacyujshu3t27yyqut7dbe3s4ay6gsmpvt4vjneyf2ncoeo2h6owm.jpeg","/ipfs/bafybeiaogjqgmdtxn6nw5ncc2ykhqxqbqbjg2557vl4chuffstuvqhklg4.jpeg","/ipfs/bafybeiapuoz4z6o5ugx6ycwl3megwklvalmghmo7u6wtpoiygsb3ikmht4.jpeg","/ipfs/bafybeib5gum4trjkhztrskouing23swtk64ozr46uzw3sunfevxan4xuoi.jpeg","/ipfs/bafybeib5sjgkoub25iqqs2wxwu77tkoi7rda6oeye3gtcgpeeonhadnay4.jpeg","/ipfs/bafybeidtoygnxoc7vztjnry6gst4dz2hwpasau2auq5xcxetju3t6vkhgy.jpeg","/ipfs/bafybeifh5sxmhh4b2cnm2z2lbzjnsibis3nwd64nqnrsrsxk7avhbp5f4i.jpeg","/ipfs/bafybeifj5fhnldvru62ao6r6hetrtavnzo3zrvnxmwmwpu6ualdafaie6e.jpeg","/ipfs/bafybeifvgi5ch2dtv5g5obnwrr6hlzewxbb4wtvnkh6gmwsrirv3c2seoe.jpeg","/ipfs/bafybeigctmnr7sfblfgy3dsppbdshmufsau52u622i6sx3otzpzfwh2oya.jpeg","/ipfs/bafybeigxokj6rv7jeblpha3fb65dl5wvmxq4y23d7ewrpwg7fw7xo4rkxi.jpeg","/ipfs/bafybeihqwvrmjspod3maflvjvo4qc6kjypmocquijd7lm5kmk5jfezkofi.jpeg","/manifest.json","/mstile-150x150.png","/safari-pinned-tab.svg","/scripts/algosdk.1.13.0-beta.2.min.js","/scripts/algosdk.min.js","/scripts/myalgo.min.js","/share/apps-twitter-share.jpg"]),t=new Set(a);self.addEventListener("install",(e=>{e.waitUntil(caches.open(s).then((e=>e.addAll(a))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const a of e)a!==s&&await caches.delete(a);self.clients.claim()})))})),self.addEventListener("fetch",(s=>{if("GET"!==s.request.method||s.request.headers.has("range"))return;const a=new URL(s.request.url),i=a.protocol.startsWith("http"),n=a.hostname===self.location.hostname&&a.port!==self.location.port,o=a.host===self.location.host&&t.has(a.pathname),c="only-if-cached"===s.request.cache&&!o;!i||n||c||s.respondWith((async()=>o&&await caches.match(s.request)||async function(s){const a=await caches.open(`offline${e}`);try{const e=await fetch(s);return a.put(s,e.clone()),e}catch(e){const t=await a.match(s);if(t)return t;throw e}}(s.request))())}))}();
